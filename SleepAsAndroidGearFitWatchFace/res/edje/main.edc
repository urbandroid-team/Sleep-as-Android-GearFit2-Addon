/*
 * Copyright (c) 2016 Samsung Electronics Co., Ltd. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "../../inc/view_defines.h"

#define DBG(part_name, r, g, b, a) \
	part {                         \
		name, part_name".DBG";     \
		type, RECT;                \
		scale, 1;                  \
		description {              \
			state, "default" 0.0;  \
			rel1 {                 \
				to, part_name;     \
				relative, 0.0 0.0; \
			}                      \
			rel2 {                 \
				to, part_name;     \
				relative, 1.0 1.0; \
			}                      \
			color, r g b a;        \
		}                          \
	}                              \


#define IMG_BG "../res/images/cipher_board_bg.png"
#define IMG_RING "../res/images/cipher_board_ring.png"
#define IMG_SHADOW "../res/images/cipher_board_shadow.png"
#define IMG_COLON "../res/images/colon.png"
#define IMG_SECOND "../res/images/second_hand.png"

#define MINUTE_HEIGHT 0.2139
#define MINUTE_MAIN_REL_1 0.39305
#define MINUTE_MAIN_REL_2 MINUTE_MAIN_REL_1+MINUTE_HEIGHT
#define MINUTE_DISTANCE 0.2639

#define CIPHER_BOARD_BG "cipher_board_bg"

#define MINUTE_PART(part_name) \
	part {                                                                                  \
		name: part_name;                                                                    \
		type: TEXT;                                                                         \
		scale: 1;                                                                           \
		description {                                                                       \
			state: "default" 0.0;                                                           \
			visible: 1;                                                                     \
			rel1.relative: 0.5389 (MINUTE_MAIN_REL_1);                                      \
			rel2.relative: 0.8583 (MINUTE_MAIN_REL_2);                                      \
			text {                                                                          \
				size: 82;                                                                   \
				align: 1.0 0.58;                                                            \
				elipsis: -1;                                                                \
				text: "00";                                                                 \
			}                                                                               \
			color: 255 255 255 64;                                                          \
		}                                                                                   \
		description {                                                                       \
			state: "position" 0.0;                                                          \
			inherit: "default" 0.0;                                                         \
			rel1.relative: 0.5389 (MINUTE_MAIN_REL_1-MINUTE_DISTANCE*2);                    \
			rel2.relative: 0.8583 (MINUTE_MAIN_REL_2-MINUTE_DISTANCE*2);                    \
		}                                                                                   \
		description {                                                                       \
			state: "position" 0.1;                                                          \
			inherit: "default" 0.0;                                                         \
			rel1.relative: 0.5389 (MINUTE_MAIN_REL_1-MINUTE_DISTANCE);                      \
			rel2.relative: 0.8583 (MINUTE_MAIN_REL_2-MINUTE_DISTANCE);                      \
		}                                                                                   \
		description {                                                                       \
			state: "position" 0.2;                                                          \
			inherit: "default" 0.0;                                                         \
			color: 255 255 255 255;                                                         \
		}                                                                                   \
		description {                                                                       \
			state: "position" 0.3;                                                          \
			inherit: "position" 0.1;                                                        \
			rel1.relative: 0.5389 (MINUTE_MAIN_REL_1+MINUTE_DISTANCE);                      \
			rel2.relative: 0.8583 (MINUTE_MAIN_REL_2+MINUTE_DISTANCE);                      \
		}                                                                                   \
		description {                                                                       \
			state: "position" 0.4;                                                          \
			inherit: "position" 0.0;                                                        \
			rel1.relative: 0.5389 (MINUTE_MAIN_REL_1+MINUTE_DISTANCE*2);                    \
			rel2.relative: 0.8583 (MINUTE_MAIN_REL_2+MINUTE_DISTANCE*2);                    \
		}                                                                                   \
	}                                                                                       \


collections {
	images {
		image: IMG_BG COMP;
		image: IMG_RING COMP;
		image: IMG_SHADOW COMP;
		image: IMG_COLON COMP;
		image: IMG_SECOND COMP;
	}

	group {
		name : LAYOUT_GROUP_MAIN;

		parts{
			part {
				name: CIPHER_BOARD_BG;
				type: IMAGE;
				scale: 1;
				description {
					state: "default" 0.0;
					visible: 1;
					rel1 {
						relative: 0.0 0.0;
					}
					rel2 {
						relative: 1.0 1.0;
					}
					image {
						normal: IMG_BG;
					}
				}
			}

			part {
				name: "cipher_board_shadow";
				type: IMAGE;
				scale: 1;
				description {
					state: "default" 0.0;
					visible: 1;
					rel1 {
						relative: 0.0 0.0;
					}
					rel2 {
						relative: 1.0 1.0;
					}
					image {
						normal: IMG_SHADOW;
					}
				}
			}

			part {
				name: "colon";
				type: IMAGE;
				scale: 1;
				description {
					state: "default" 0.0;
					visible: 1;
					rel1 {
						relative: 0.4903 0.4625;
					}
					rel2 {
						relative: 0.5097 0.5375;
					}
					image {
						normal: IMG_COLON;
					}
				}
			}

			part {
				name: PART_HOUR_TEXT;
				type: TEXT;
				scale: 1;
				description {
					state: "default" 0.0;
					visible: 1;
					rel1 {
						relative: 0.0000 0.34585;
					}
					rel2 {
						relative: 0.4889 0.65415;
					}
					text {
						size: 122;
						text: "23";
						align: 1.0 0.58;
						elipsis: -1;
					}
					color: 255 255 255 255;
				}
			}

			MINUTE_PART(PART_MINUTE_PREV)
			MINUTE_PART(PART_MINUTE_MAIN)
			MINUTE_PART(PART_MINUTE_NEXT)
			MINUTE_PART(PART_MINUTE_OUTSIDE)

			part {
				name: "cipher_board_ring";
				type: IMAGE;
				scale: 1;
				description {
					state: "default" 0.0;
					visible: 1;
					rel1 {
						relative: 0.0 0.0;
					}
					rel2 {
						relative: 1.0 1.0;
					}
					image {
						normal: IMG_RING;
					}
				}
			}

			part {
				name: PART_SECOND_HAND;
				type: IMAGE;
				scale: 1;
				description {
					state: "default" 0.0;
					visible: 1;
					rel1 {
						relative: 0.48055 0.04995;
					}
					rel2 {
						relative: 0.51945 0.08885;
					}

					image {
						normal: IMG_SECOND;
					}

					map {
						on: 1;
						smooth: 1;
						perspective_on: 1;
						rotation {
							center: CIPHER_BOARD_BG;
							z: 0.0;
						}
					}
				}
				description {
					state: "ambient" 0.0;
					inherit: "default" 0.0;
					visible: 0;
				}
			}
		}

		script {
			public g_curr = 0;
			public g_anim_id = 0;

			public message(Msg_Type:type, id, ...) {
				new Float:rot = getarg(2);

				if ((type == MSG_INT) && (id == MSG_ID_SECOND_PART)) {
					custom_state(PART:PART_SECOND_HAND, "default", 0.0);
					set_state_val(PART:PART_SECOND_HAND,  STATE_MAP_ROT_Z, rot * 6.0);
					set_state(PART:PART_SECOND_HAND, "custom", 0.0);
				}
			}

			public anim_cb(val, Float:pos) {
				new id = get_int(g_anim_id)
				new pos00 = (val + 0) % 4;
				new pos01 = (val + 1) % 4;
				new pos10 = (val + 1) % 4;
				new pos11 = (val + 2) % 4;
				new pos20 = (val + 2) % 4;
				new pos21 = (val + 3) % 4;
				new pos30 = (val + 3) % 4;
				new pos31 = (val + 4) % 4;
				new part_outside[64];

				if( pos01 == 0 ) {
					pos00 = 3;
					pos01 = 4;
					part_outside = PART_MINUTE_PREV;
				}

				if( pos11 == 0 ) {
					pos10 = 3;
					pos11 = 4;
					part_outside = PART_MINUTE_MAIN;
				}

				if( pos21 == 0 ) {
					pos20 = 3;
					pos21 = 4;
					part_outside = PART_MINUTE_NEXT;
				}

				if( pos31 == 0 ) {
					pos30 = 3;
					pos31 = 4;
					part_outside = PART_MINUTE_OUTSIDE;
				}

				if (pos >= 1.0) {
					cancel_anim(id);
					return;
				} else if (pos <= 0.1) {
					send_message(MSG_STRING, MSG_ID_MINUTE_PART_NEW_OUTSIDE, part_outside);
				}

				set_tween_state(PART:PART_MINUTE_PREV, pos, "position", pos01 * 0.1, "position", pos00 * 0.1);
				set_tween_state(PART:PART_MINUTE_MAIN, pos, "position", pos11 * 0.1, "position", pos10 * 0.1);
				set_tween_state(PART:PART_MINUTE_NEXT, pos, "position", pos21 * 0.1, "position", pos20 * 0.1);
				set_tween_state(PART:PART_MINUTE_OUTSIDE, pos, "position", pos31 * 0.1, "position", pos30 * 0.1);
			}
		}

		programs {

			program {
				name: "on,load";
				signal: "load";
				source: "*";
				script {
					set_int(g_curr, 0);

					set_state(PART:PART_MINUTE_PREV, "position", 0.1);
					set_state(PART:PART_MINUTE_MAIN, "position", 0.2);
					set_state(PART:PART_MINUTE_NEXT, "position", 0.3);
					set_state(PART:PART_MINUTE_OUTSIDE, "position", 0.4);
				}
			}

			program{
				name: "minute,change,start";
				signal: SIGNAL_MINUTE_CHANGE_ANIM_START;
				source: "";
				script {

					new curr;
					new id;
					curr = get_int(g_curr);
					id = anim(MINUTE_PART_ANIMATION_TIME, "anim_cb", curr);
					curr--;
					set_int(g_curr, curr);
					set_int(g_anim_id, id);
				}
			}

			program{
				name: "second,state,visible";
				signal: SIGNAL_SECOND_STATE_VISIBLE;
				source: "";
				action: STATE_SET "default" 0.0;
				target: PART_SECOND_HAND;
			}

			program{
				name: "second,state,hidden";
				signal: SIGNAL_SECOND_STATE_HIDDEN;
				source: "";
				action: STATE_SET "ambient" 0.0;
				target: PART_SECOND_HAND;
			}
		}
	}
}
